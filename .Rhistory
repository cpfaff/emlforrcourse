require(slidify)
publish_github(username = "cpfaff", repo = "emlforrcourse")
read.csv("http://cpfaff.github.io/emlforrcourse/assets/files/csv_file_from_email.csv")
read.csv("http://cpfaff.github.io/emlforrcourse/assets/files/csv_file_from_email.csv", row.names = F)
publish_github(username = "cpfaff", repo = "emlforrcourse")
read.csv("http://bit.ly/11Q4GOt")
undescribed_data = read.csv("http://bit.ly/11Q4GOt")
typeof(undescribed_data)
undescribed_data$dates
undescribed_data$dates = asDate(undescribed_data$dates)
undescribed_data$dates = as.Date(undescribed_data$dates)
river = c("SAC",  "SAC",   "AM")
spp   = c("king",  "king", "ccho")
stg   = c("smolt", "parr", "smolt")
ct    = c(293,    410,    210)
#dates = as.Date(c("1991-10-10", "1992-11-10", "1993-10-10"))
dates = c("1991-10-10", "1992-11-10", "1993-10-10")
#write.csv(data.frame(river, spp, stg, ct, dates), "nometadata.csv")
undescribed_data = data.frame(river, spp, stg, ct, dates)
col_defs = c("River site used for collection",
"Species common name",
"Life Stage",
"Count of live fish in traps",
"Date of collection")
unit_defs = list(c(SAC = "The Sacramento River", AM = "The American River"),
c(king = "King Salmon", ccho = "Coho Salmon"),
c(parr = "third life stage", smolt = "fourth life stage"),
unit = "number",
format = "YYYY-MM-DD")
described_dataset = data.set(undescribed_data,
col.defs = col_defs,
unit.defs = unit_defs)
require(EML)
described_dataset = data.set(undescribed_data,
col.defs = col_defs,
unit.defs = unit_defs)
claas = eml_person("Claas-Thido Pfaff <fake@test.com>")
claas_contact = as(claas, "contact")
address <- new("address",
deliveryPoint = "Universit채t Leipzig, Johannisallee 21",
city = "Leipzig",
postalCode = "04103",
country = "GER")
claas_contact@address = address
data <- eml(dat = described_dataset,
title = "This is an example title",
contact = claas_contact
)
eml_write(data, file="mymetadata.eml")
river = c("SAC",  "SAC",   "AM")
spp   = c("king",  "king", "ccho")
stg   = c("smolt", "parr", "smolt")
ct    = c(293,    410,    210)
dates = as.Date(c("1991-10-10", "1992-11-10", "1993-10-10"))
undescribed_data = data.frame(river, spp, stg, ct, dates)
kable(undescribed_data)
require("EML")
require("knitr")
kable(undescribed_data)
claas = eml_person(first = "Claas-Thido" last = "Pfaff" email = "<fake@test.com>")
claas = eml_person(first = "Claas-Thido" family = "Pfaff" email = "<fake@test.com>")
claas = eml_person(first = "Claas-Thido", family = "Pfaff", email = "<fake@test.com>")
claas = eml_person(first = "Claas-Thido", family = "Pfaff", email = "fake@test.com")
claas = eml_person(given = "Claas-Thido", family = "Pfaff", email = "fake@test.com")
person(given = "Claas-Thido", family = "Pfaff")
person(given = "Claas-Thido", family = "Pfaff", email = "fake@test.com")
claas = eml_person(given = "Claas-Thido", family = "Pfaff", email = "fake@test.com")
claas = eml_person("Claas-Thido", family = "Pfaff", email = "fake@test.com")
claas = eml_person("Claas-Thido", family = "Pfaff", email = "fake@test.com")
claas
claas = eml_person(given = "Claas-Thido", family = "Pfaff", email = "fake@test.com")
claas = eml_person("test", given = "Claas-Thido", family = "Pfaff", email = "fake@test.com")
claas
claas = eml_person("Claas-Thido Peter Pfaff <fake@test.com>")
claas
class(claas)
claas = eml_person("Claas-Thido Pfaff <fake@test.com>")
class(claas)
claas_contact = as(claas, "contact")
claas_contact
class(claas_contact)
class(claas)
as(claas, "author")
as(claas, "publisher")
new("publisher")
slots(new("publisher"))
slot(new("publisher"))
slotNames(new("publisher"))
slotNames(new("contact"))
slotNames(new("creator"))
claas = eml_person("Claas-Thido Pfaff <fake@test.com>")
claas = eml_person("Claas-Thido Pfaff <fake@test.com>")
claas_contact = as(claas, "contact")
address <- new("address",
deliveryPoint = "Universit채t Leipzig, Johannisallee 21",
city = "Leipzig",
postalCode = "04103",
country = "GER")
claas_contact@address = address
claas_contact
slotNames(claas_contact)
claas_contact@individualName
slotNames(new("address"))
slotNames(claas_contact)
claas_contact@individualName
claas_contact = as(claas, "contact")
```{r check_individual_name}
class(claas)
claas
typeof(claas)
claas
- Other objects!
Slotnames and values
```{r check_slotnames}
slotNames(claas)
slotNames(claas)
claas@individualName
claas@individualName@givenName
claas@individualName@surName
as.creator("claas")
as("creator", claas)
as(creator, claas)
as(claas, "creator")
as(claas, "person")
new("address")
slotNames(new("address"))
slots(new("address"))
slot(new("address"))
typeof(slotNames(new("address")))
address <- new("address",
deliveryPoint = "Universit채t Leipzig, Johannisallee 21",
city = "Leipzig",
postalCode = "04103",
country = "GER")
getSlots("address")
getSlots(claas)
getSlots("contact")
getSlots("address")
as(1, "numeric")
as(a, "numeric")
as("a", "numeric")
as("22", "numeric")
getSlots("contact")
getSlots("individualName")
getSlots("individualName")
eml_person("Your Name <yourmail@provider.com>")
new("creator")
class
claas
class(claas)
as(claas, "creator")
address = new("address",
deliveryPoint = "Universit채t Leipzig, Johannisallee 21",
city = "Leipzig",
postalCode = "04103",
country = "GER")
claas@address = address
as(claas, "creator")
as(claas, "contact")
new("intellectualRghts")
new("intellectualRights")
new("intellectualRights")
new("dataset")
getSlots(new("dataset"))
getSlots(("dataset"))
which(is.character((getSlots(("dataset")))
)
c
which(is.character(getSlots("dataset")))
is.character(getSlots("dataset"))
getSlots("dataset")
unname(getSlots("dataset"))
which(is.character(unname(getSlots("dataset")))
)
which((unname(getSlots("dataset")) == "character")
qp9u
which(unname(getSlots("dataset")))
which(unname(getSlots("dataset") == "character"))
names(getSlots())which(unname(getSlots("dataset") == "character"))
slots(new("dataset"))
slotNames(new("dataset"))
slotNames(new("dataset"))$names(getSlots())which(unname(getSlots("dataset") == "character"))
slotNames(new("dataset"))[,names(getSlots())which(unname(getSlots("dataset") == "character")))
slotNames(new("dataset"))[names(getSlots())which(unname(getSlots("dataset") == "character")))
names(getSlots())which(unname(getSlots("dataset") == "character"))
names(getSlots())which(unname(getSlots("dataset") == "character"))
slotNames(new("dataset"))[which(unname(getSlots("dataset") == "character"))]
