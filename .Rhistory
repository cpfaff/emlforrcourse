class(1)
typeof(1)
typeof(1.1)
typeof(1.11234871234)
class(1.11234871234)
c("A".1)
c("A",1)
class(c("A",1))
require(slidify)
new("contact")
require(EML)
slotNames("contact")
getSlots("contact")
new("numeric")
getSlots("numeric")
slotNames("numeric")
new("character")
slotNames("character")
claas_creator = as(claas, "creator")
slotNames("address")
library("devtools")
library("EML")
undescribed_data = read.csv("http://bit.ly/11Q4GOt")
undescribed_data$dates = as.Date(undescribed_data$dates)
# create column definitions
col_defs = c("River site used for collection",
"Species common name",
"Life Stage",
"Count of live fish in traps",
"Date of collection")
# create unit definitions
unit_defs = list(c(SAC = "The Sacramento River", AM = "The American River"),
c(king = "King Salmon", ccho = "Coho Salmon"),
c(parr = "third life stage", smolt = "fourth life stage"),
unit = "number",
format = "YYYY-MM-DD")
# assemble with the data.set command
described_dataset = data.set(undescribed_data,
col.defs = col_defs,
unit.defs = unit_defs)
# add a contact person
claas_contact = eml_person("Claas-Thido Pfaff <test@fake.com>")
address_of_claas_contact = new("address",
deliveryPoint = "Universität Leipzig, Johannisallee 21",
city = "Leipzig",
postalCode = "04103",
country = "GER")
claas_contact@address = address_of_claas_contact
# add a creator person
nils_contact = eml_person("Nils Silar <silar@fake.com>")
nils_creator = as(nils, "creator")
# as nils has the same affiliation
nils@address = address_of_claas_contact
# read the csv without metadata you recieved from Karl
undescribed_data = read.csv("http://bit.ly/11Q4GOt")
undescribed_data$dates = as.Date(undescribed_data$dates)
# create column definitions
col_defs = c("River site used for collection",
"Species common name",
"Life Stage",
"Count of live fish in traps",
"Date of collection")
# create unit definitions
unit_defs = list(c(SAC = "The Sacramento River", AM = "The American River"),
c(king = "King Salmon", ccho = "Coho Salmon"),
c(parr = "third life stage", smolt = "fourth life stage"),
unit = "number",
format = "YYYY-MM-DD")
# assemble with the data.set command
described_dataset = data.set(undescribed_data,
col.defs = col_defs,
unit.defs = unit_defs)
# add a contact person
claas_contact = eml_person("Claas-Thido Pfaff <test@fake.com>")
address_of_claas_contact = new("address",
deliveryPoint = "Universität Leipzig, Johannisallee 21",
city = "Leipzig",
postalCode = "04103",
country = "GER")
claas_contact@address = address_of_claas_contact
claas_contact
getSlots("dataset")
getSlots(eml)
getSlots("eml)
getSlots("eml")
```
getSlots("EML")
getSlots("dataset")
getSlots("dataset")
eml
getSlots("dataset")[10]
getSlots("dataset")[,10]
getSlots("dataset")[10]
getSlots("dataset")[1..10]
getSlots("dataset")
subset(getSlots("dataset"), 10)
getSlots("dataset")[1]
getSlots("dataset")[1:10]
source('~/.active-rstudio-document', echo=TRUE)
myname
data
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator
intellectualRights = "CC0, Creative commons zero"
)
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
)
data
today
date
date()
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
pubDate = date()
contact = claas,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
)
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
pubDate = date(),
contact = claas,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
)
data
eml_write(data, file="mymetadata.xml")
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
)
typeof(data)
eml_write(data, file="mymetadata.xml")
claas@address = address
source('~/.active-rstudio-document', echo=TRUE)
claas_creator
claas
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
)
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
)
eml_write(data, file="mymetadata.xml")
getSlots("dataset")
eml_publish("mymetadata.xml",
description="Example EML file from EML",
categories = "Ecology",
tags = "EML",
destination="figshare")
described_dataset
eml_read(http://figshare.com/download/file/1812039)
eml_read("http://figshare.com/download/file/1812039")
eml_read("figshare.com/download/file/1812039")
eml_read(file = "figshare.com/download/file/1812039")
eml_read("http://figshare.com/download/file/1812039")
eml_read("http://china.befdata.biow.uni-leipzig.de/datasets/272.eml")
described_dataset
described_dataset
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
)
eml_write(data, file="mymetadata.xml")
eml_publish("mymetadata.xml",
description="Example EML file from EML",
categories = "Ecology",
tags = "EML",
destination="figshare")
metadata <- eml_read("./mymetadata.xml")
metadata
eml_get(metadata, "contact")
eml_get(metadata, "coverage")
eml_get(metadata, "col.defs")
example_dataset = eml_get(metadata, "data.set")
example_dataset
example_dataset[1:4, 1:3]
example_dataset
metadata
eml_get(metadata, "contact")
eml_get(metadata, "col.defs")
example_dataset = eml_get(metadata, "data.set")
example_dataset
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
described_dataset
described_dataset
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
)
dat <- data.frame(river = factor(c("SAC",
"SAC",
"AM")),
spp   = c("Oncorhynchus tshawytscha",
"Oncorhynchus tshawytscha",
"Oncorhynchus kisutch"),
stg   = ordered(c("smolt",
"parr",
"smolt"),
levels=c("parr",
"smolt")), # => parr < smolt
ct    = c(293L,
410L,
210L),
day   = as.Date(c("2013-09-01",
"2013-09-1",
"2013-09-02")),
stringsAsFactors = FALSE)
eml(dat = dat)
dat <- data.frame(river = factor(c("SAC",
"SAC",
"AM")),
spp   = c("Oncorhynchus tshawytscha",
"Oncorhynchus tshawytscha",
"Oncorhynchus kisutch"),
stg   = ordered(c("smolt",
"parr",
"smolt"),
levels=c("parr",
"smolt")), # => parr < smolt
ct    = c(293L,
410L,
210L),
day   = as.Date(c("2013-09-01",
"2013-09-1",
"2013-09-02")),
stringsAsFactors = FALSE)
eml(dat = dat, contact = claas)
col.defs <- c("River site used for collection",
"Species scientific name",
"Life Stage",
"count of live fish in traps",
"The day on which traps were sampled")
unit.defs <- list(
c(SAC = "The Sacramento River",     # Factor
AM = "The American River"),
"Scientific name",                   # Character string
c(parr = "third life stage",        # Ordered factor
smolt = "fourth life stage"),
c(unit = "number",
precision = 1,
bounds = c(0, Inf)),              # Integer
c(format = "YYYY-MM-DD",            # Date
precision = 1))
eml_write(dat,
col.defs = col.defs,
unit.defs = unit.defs,
creator = "Carl Boettiger <cboettig@ropensci.org>",
file = "EML_example.xml")
dates = as.Date(c("1991-10-10", "1992-11-10", "1993-10-10"))
dates
unit_defs = list(c(SAC = "The Sacramento River", AM = "The American River"),
c(king = "King Salmon", ccho = "Coho Salmon"),
c(parr = "third life stage", smolt = "fourth life stage"),
unit = "number",
c(format = "YYYY-MM-DD", precision = 1)
described_dataset = data.set(undescribed_data,
col.defs = col_defs,
unit.defs = unit_defs)
unit_defs = list(c(SAC = "The Sacramento River", AM = "The American River"),
c(king = "King Salmon", ccho = "Coho Salmon"),
c(parr = "third life stage", smolt = "fourth life stage"),
unit = "number",
c(format = "YYYY-MM-DD", precision = 1))
described_dataset = data.set(undescribed_data,
col.defs = col_defs,
unit.defs = unit_defs)
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
)
described_dataset = data.set(undescribed_data,
col.defs = col_defs,
unit.defs = unit_defs)
unit_defs = list(c(SAC = "The Sacramento River", AM = "The American River"),
c(king = "King Salmon", ccho = "Coho Salmon"),
c(parr = "third life stage", smolt = "fourth life stage"),
unit = "number",
c(format = "YYYY-MM-DD", precision = 1))
col_defs = c("River site used for collection",
"Species common name",
"Life Stage",
"Count of live fish in traps",
"Date of collection")
eml_publish(data,
description="Example EML file from EML",
categories = "Ecology",
tags = "EML",
destination="figshare")
eml_publish("mymetadata.xml",
destination="figshare")
metadata <- eml_read("./mymetadata.xml")
metadata
eml_get(metadata, "col.defs")
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
)
described_dataset
unit_defs = list(c(SAC = "The Sacramento River", AM = "The American River"),
c(king = "King Salmon", ccho = "Coho Salmon"),
c(parr = "third life stage", smolt = "fourth life stage"),
c(unit = "number"),
c(format = "YYYY-MM-DD"))
described_dataset = data.set(undescribed_data,
col.defs = col_defs,
unit.defs = unit_defs)
described_dataset
col_defs
unit_defs
described_dataset = data.set(undescribed_data,
col.defs = col_defs,
unit.defs = unit_defs)
described_dataset
create_custom_unit(id = "metersSquaredPerHectare",
parentSI = "dimensionless",
unitType = "dimensionless",
multiplierToSI = "0.0001",
description = "Square meters per hectare")
getSlots("person")
eml_get(metadata, "contact")
eml_get(metadata, "col.defs")
eml_get(metadata, "unti.defs")
eml_get(metadata, "unit.defs")
metadata
example_dataset = eml_get(metadata, "data.set")
example_dataset
example_dataset = eml_get(metadata, "data.set")
example_dataset
```{r display_part_of_the_data}
example_dataset = eml_get(metadata, "data.set")
example_dataset = eml_get(metadata, "data.set")
getwd()
metadata <- eml_read("mymetadata.xml")
metadata <- eml_read("mymetadata.xml")
example_dataset = eml_get(metadata, "data.set")
example_dataset
example_dataset
example_dataset = eml_get(metadata, "data.set")[1]
example_dataset
example_dataset = eml_get(metadata, "data.set")
example_dataset
as(example_dataset, "data.frame")
described_dataset
dat <- data.frame(river = factor(c("SAC",
"SAC",
"AM")),
spp   = c("Oncorhynchus tshawytscha",
"Oncorhynchus tshawytscha",
"Oncorhynchus kisutch"),
stg   = ordered(c("smolt",
"parr",
"smolt"),
levels=c("parr",
"smolt")), # => parr < smolt
ct    = c(293L,
410L,
210L),
day   = as.Date(c("2013-09-01",
"2013-09-1",
"2013-09-02")),
stringsAsFactors = FALSE)
dat
col.defs <- c("River site used for collection",
"Species scientific name",
"Life Stage",
"count of live fish in traps",
"The day on which traps were sampled")
unit.defs <- list(
c(SAC = "The Sacramento River",     # Factor
AM = "The American River"),
"Scientific name",                   # Character string
c(parr = "third life stage",        # Ordered factor
smolt = "fourth life stage"),
c(unit = "number",
precision = 1,
bounds = c(0, Inf)),              # Integer
c(format = "YYYY-MM-DD",            # Date
precision = 1))
eml(dat = dat, title = "Title", contact = claas)
example_dataset = eml_get(metadata, "data.frame")
example_dataset
example_dataset = eml_get(metadata, "data.frame")
as(example_dataset, "data.frame")
example_dataset
require(slidify)
require(EML)
new("contact")
new("contact", givenName = "Claas-Thido", surName = "Pfaff")
new("contact", givenName = "Claas-Thido", surName = "Pfaff")
getSlots("contact")
getSlots("individualName")
eml_keyword(c("Test", "tust"))
eml_keyword(new("keywordThesurus"))
source('~/.active-rstudio-document', echo=TRUE)
claas_contact
claas_creator
as(claas_creator, "xml")
as(claas_creator, "XML")
new("contact", individualName = new("individualName", givenName = "Claas-Thido Pfaff"))
getSlots("individualName")
getSlots("contact")
new("contact", individualName = new("individualName", givenName = "Claas-Thido Pfaff", surName = "Pfaff"), electronicMailAddress = "fake@test.com")
new("contact",
individualName = new("individualName",
givenName = "Claas-Thido Pfaff",
surName = "Pfaff"),
electronicMailAddress = "fake@test.com")
getSlots("contact")
getSlots(contact)
getSlots("contact")
getSlots(claas)
getSlots("claas")
getSlots(claas_contact)
slotNames(claas)
getSlots(claas)
getSlots("contact")
slotNames("contact")
getSlots("contact")
names(getSlots("contact"))
getSlots("contact")
new("contact", new("individualName",
givenName = "Claas-Thido Pfaff",
surName = "Pfaff"),
elecrtronicMailAddress = "claas-thido.pfaff@uni-leipzig.de")
new("contact", individualName = new("individualName",
givenName = "Claas-Thido Pfaff",
surName = "Pfaff"),
elecrtronicMailAddress = "claas-thido.pfaff@uni-leipzig.de")
new("contact", individualName = new("individualName",
givenName = "Claas-Thido Pfaff",
surName = "Pfaff"),
electronicMailAddress = "claas-thido.pfaff@uni-leipzig.de")
new("contact", individualName = new("individualName",
givenName = "Claas-Thido Pfaff",
surName = "Pfaff"),
electronicMailAddress = "claas-thido.pfaff@uni-leipzig.de"
address = new("address",
deliveryPoint = "Universität Leipzig, Johannisallee 21",
city = "Leipzig",
postalCode = "04103",
country = "GER")
)
new("contact", individualName = new("individualName",
givenName = "Claas-Thido Pfaff",
surName = "Pfaff"),
electronicMailAddress = "claas-thido.pfaff@uni-leipzig.de",
address = new("address",
deliveryPoint = "Universität Leipzig, Johannisallee 21",
city = "Leipzig",
postalCode = "04103",
country = "GER")
)
getSlots("contact")
new("contact", individualName = new("individualName",
givenName = "Claas-Thido Pfaff",
surName = "Pfaff"),
electronicMailAddress = "claas-thido.pfaff@uni-leipzig.de",
phone = "+49-341-97-38587",
address = new("address",
deliveryPoint = "Universität Leipzig, Johannisallee 21",
city = "Leipzig",
postalCode = "04103",
country = "GER")
)
getSlots("contact")
getSlots("eml")
getSlots("dataset")
new("dataset")
publish_github(repo = "emlforrcourse", username = "cpfaff")
eml_read("http://cpfaff.github.io/emlforrcourse/assets/files/example_eml_from_url.xml")
http://bit.ly/1viuNDZ
eml_read("http://bit.ly/1viuNDZ")
metadata = eml_read("mymetadata.xml")
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
)
eml_write(data, file="mymetadata.xml")
eml_publish("mymetadata.xml",
description="Example EML file from EML",
categories = "Ecology",
tags = "EML",
destination="figshare")
