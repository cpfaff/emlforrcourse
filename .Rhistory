)
dat <- data.frame(river = factor(c("SAC",
"SAC",
"AM")),
spp   = c("Oncorhynchus tshawytscha",
"Oncorhynchus tshawytscha",
"Oncorhynchus kisutch"),
stg   = ordered(c("smolt",
"parr",
"smolt"),
levels=c("parr",
"smolt")), # => parr < smolt
ct    = c(293L,
410L,
210L),
day   = as.Date(c("2013-09-01",
"2013-09-1",
"2013-09-02")),
stringsAsFactors = FALSE)
eml(dat = dat)
dat <- data.frame(river = factor(c("SAC",
"SAC",
"AM")),
spp   = c("Oncorhynchus tshawytscha",
"Oncorhynchus tshawytscha",
"Oncorhynchus kisutch"),
stg   = ordered(c("smolt",
"parr",
"smolt"),
levels=c("parr",
"smolt")), # => parr < smolt
ct    = c(293L,
410L,
210L),
day   = as.Date(c("2013-09-01",
"2013-09-1",
"2013-09-02")),
stringsAsFactors = FALSE)
eml(dat = dat, contact = claas)
col.defs <- c("River site used for collection",
"Species scientific name",
"Life Stage",
"count of live fish in traps",
"The day on which traps were sampled")
unit.defs <- list(
c(SAC = "The Sacramento River",     # Factor
AM = "The American River"),
"Scientific name",                   # Character string
c(parr = "third life stage",        # Ordered factor
smolt = "fourth life stage"),
c(unit = "number",
precision = 1,
bounds = c(0, Inf)),              # Integer
c(format = "YYYY-MM-DD",            # Date
precision = 1))
eml_write(dat,
col.defs = col.defs,
unit.defs = unit.defs,
creator = "Carl Boettiger <cboettig@ropensci.org>",
file = "EML_example.xml")
dates = as.Date(c("1991-10-10", "1992-11-10", "1993-10-10"))
dates
unit_defs = list(c(SAC = "The Sacramento River", AM = "The American River"),
c(king = "King Salmon", ccho = "Coho Salmon"),
c(parr = "third life stage", smolt = "fourth life stage"),
unit = "number",
c(format = "YYYY-MM-DD", precision = 1)
described_dataset = data.set(undescribed_data,
col.defs = col_defs,
unit.defs = unit_defs)
unit_defs = list(c(SAC = "The Sacramento River", AM = "The American River"),
c(king = "King Salmon", ccho = "Coho Salmon"),
c(parr = "third life stage", smolt = "fourth life stage"),
unit = "number",
c(format = "YYYY-MM-DD", precision = 1))
described_dataset = data.set(undescribed_data,
col.defs = col_defs,
unit.defs = unit_defs)
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
)
described_dataset = data.set(undescribed_data,
col.defs = col_defs,
unit.defs = unit_defs)
unit_defs = list(c(SAC = "The Sacramento River", AM = "The American River"),
c(king = "King Salmon", ccho = "Coho Salmon"),
c(parr = "third life stage", smolt = "fourth life stage"),
unit = "number",
c(format = "YYYY-MM-DD", precision = 1))
col_defs = c("River site used for collection",
"Species common name",
"Life Stage",
"Count of live fish in traps",
"Date of collection")
eml_publish(data,
description="Example EML file from EML",
categories = "Ecology",
tags = "EML",
destination="figshare")
eml_publish("mymetadata.xml",
destination="figshare")
metadata <- eml_read("./mymetadata.xml")
metadata
eml_get(metadata, "col.defs")
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
)
described_dataset
unit_defs = list(c(SAC = "The Sacramento River", AM = "The American River"),
c(king = "King Salmon", ccho = "Coho Salmon"),
c(parr = "third life stage", smolt = "fourth life stage"),
c(unit = "number"),
c(format = "YYYY-MM-DD"))
described_dataset = data.set(undescribed_data,
col.defs = col_defs,
unit.defs = unit_defs)
described_dataset
col_defs
unit_defs
described_dataset = data.set(undescribed_data,
col.defs = col_defs,
unit.defs = unit_defs)
described_dataset
create_custom_unit(id = "metersSquaredPerHectare",
parentSI = "dimensionless",
unitType = "dimensionless",
multiplierToSI = "0.0001",
description = "Square meters per hectare")
getSlots("person")
eml_get(metadata, "contact")
eml_get(metadata, "col.defs")
eml_get(metadata, "unti.defs")
eml_get(metadata, "unit.defs")
metadata
example_dataset = eml_get(metadata, "data.set")
example_dataset
example_dataset = eml_get(metadata, "data.set")
example_dataset
```{r display_part_of_the_data}
example_dataset = eml_get(metadata, "data.set")
example_dataset = eml_get(metadata, "data.set")
getwd()
metadata <- eml_read("mymetadata.xml")
metadata <- eml_read("mymetadata.xml")
example_dataset = eml_get(metadata, "data.set")
example_dataset
example_dataset
example_dataset = eml_get(metadata, "data.set")[1]
example_dataset
example_dataset = eml_get(metadata, "data.set")
example_dataset
as(example_dataset, "data.frame")
described_dataset
dat <- data.frame(river = factor(c("SAC",
"SAC",
"AM")),
spp   = c("Oncorhynchus tshawytscha",
"Oncorhynchus tshawytscha",
"Oncorhynchus kisutch"),
stg   = ordered(c("smolt",
"parr",
"smolt"),
levels=c("parr",
"smolt")), # => parr < smolt
ct    = c(293L,
410L,
210L),
day   = as.Date(c("2013-09-01",
"2013-09-1",
"2013-09-02")),
stringsAsFactors = FALSE)
dat
col.defs <- c("River site used for collection",
"Species scientific name",
"Life Stage",
"count of live fish in traps",
"The day on which traps were sampled")
unit.defs <- list(
c(SAC = "The Sacramento River",     # Factor
AM = "The American River"),
"Scientific name",                   # Character string
c(parr = "third life stage",        # Ordered factor
smolt = "fourth life stage"),
c(unit = "number",
precision = 1,
bounds = c(0, Inf)),              # Integer
c(format = "YYYY-MM-DD",            # Date
precision = 1))
eml(dat = dat, title = "Title", contact = claas)
example_dataset = eml_get(metadata, "data.frame")
example_dataset
example_dataset = eml_get(metadata, "data.frame")
as(example_dataset, "data.frame")
example_dataset
require(slidify)
require(EML)
new("contact")
new("contact", givenName = "Claas-Thido", surName = "Pfaff")
new("contact", givenName = "Claas-Thido", surName = "Pfaff")
getSlots("contact")
getSlots("individualName")
eml_keyword(c("Test", "tust"))
eml_keyword(new("keywordThesurus"))
source('~/.active-rstudio-document', echo=TRUE)
claas_contact
claas_creator
as(claas_creator, "xml")
as(claas_creator, "XML")
new("contact", individualName = new("individualName", givenName = "Claas-Thido Pfaff"))
getSlots("individualName")
getSlots("contact")
new("contact", individualName = new("individualName", givenName = "Claas-Thido Pfaff", surName = "Pfaff"), electronicMailAddress = "fake@test.com")
new("contact",
individualName = new("individualName",
givenName = "Claas-Thido Pfaff",
surName = "Pfaff"),
electronicMailAddress = "fake@test.com")
getSlots("contact")
getSlots(contact)
getSlots("contact")
getSlots(claas)
getSlots("claas")
getSlots(claas_contact)
slotNames(claas)
getSlots(claas)
getSlots("contact")
slotNames("contact")
getSlots("contact")
names(getSlots("contact"))
getSlots("contact")
new("contact", new("individualName",
givenName = "Claas-Thido Pfaff",
surName = "Pfaff"),
elecrtronicMailAddress = "claas-thido.pfaff@uni-leipzig.de")
new("contact", individualName = new("individualName",
givenName = "Claas-Thido Pfaff",
surName = "Pfaff"),
elecrtronicMailAddress = "claas-thido.pfaff@uni-leipzig.de")
new("contact", individualName = new("individualName",
givenName = "Claas-Thido Pfaff",
surName = "Pfaff"),
electronicMailAddress = "claas-thido.pfaff@uni-leipzig.de")
new("contact", individualName = new("individualName",
givenName = "Claas-Thido Pfaff",
surName = "Pfaff"),
electronicMailAddress = "claas-thido.pfaff@uni-leipzig.de"
address = new("address",
deliveryPoint = "Universität Leipzig, Johannisallee 21",
city = "Leipzig",
postalCode = "04103",
country = "GER")
)
new("contact", individualName = new("individualName",
givenName = "Claas-Thido Pfaff",
surName = "Pfaff"),
electronicMailAddress = "claas-thido.pfaff@uni-leipzig.de",
address = new("address",
deliveryPoint = "Universität Leipzig, Johannisallee 21",
city = "Leipzig",
postalCode = "04103",
country = "GER")
)
getSlots("contact")
new("contact", individualName = new("individualName",
givenName = "Claas-Thido Pfaff",
surName = "Pfaff"),
electronicMailAddress = "claas-thido.pfaff@uni-leipzig.de",
phone = "+49-341-97-38587",
address = new("address",
deliveryPoint = "Universität Leipzig, Johannisallee 21",
city = "Leipzig",
postalCode = "04103",
country = "GER")
)
getSlots("contact")
getSlots("eml")
getSlots("dataset")
new("dataset")
publish_github(repo = "emlforrcourse", username = "cpfaff")
eml_read("http://cpfaff.github.io/emlforrcourse/assets/files/example_eml_from_url.xml")
http://bit.ly/1viuNDZ
eml_read("http://bit.ly/1viuNDZ")
metadata = eml_read("mymetadata.xml")
data <- eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
)
eml_write(data, file="mymetadata.xml")
eml_publish("mymetadata.xml",
description="Example EML file from EML",
categories = "Ecology",
tags = "EML",
destination="figshare")
require(EML)
require(slidify)
getSlots("dataset")
data = eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
publicationDate = date(),
intellectualRights = "CC0, Creative commons zero"
)
source('~/.active-rstudio-document', echo=TRUE)
date()
getSlots("dataset")
data = eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
pubDate = date(),
intellectualRights = "CC0, Creative commons zero"
)
source('~/.active-rstudio-document', echo=TRUE)
data = eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas,
creator = claas_creator,
pubDate = date(),
intellectualRights = "CC0, Creative commons zero"
)
eml_get(metadata, "title")
eml_get(metadata, "data.set")
eml_get(metadata, "data.set")
```{r }
metadata = eml_read("http://bit.ly/1viuNDZ")
eml_get(metadata, "data.set")
metadata
metadata = eml_read("mymetadata.xml")
eml_get(metadata, "data.set")
eml_get(metadata, "data.frame")
eml_get(metadata_from_file, "data.frame")
metadata_locally = eml_read("mymetadata.xml")
metadata_online = eml_read("http://bit.ly/1viuNDZ")
eml_get(metadata_locally, "data.frame")
the_data = eml_get(metadata_locally, "data.frame")
summary(the_data)
eml
eml
eml_dataset()
eml_dataset
the_data = eml_get(metadata_locally, "data.frame")
the_data
publish_github(repo = "emlforrcourse", username = "cpfaff")
publish_github(repo = "emlforrcourse", username = "cpfaff")
publish_github(repo = "emlforrcourse", username = "cpfaff")
publish_github(repo = "emlforrcourse", username = "cpfaff")
eml_read("http://bit.ly/1yhi1b3")
data = eml_read("http://bit.ly/1yhi1b3")
eml_get(data, "data.frame")
data@title
data
dataset
data@dataset
data@dataset@title
eml_from_url@dataset@title
eml_from_url = eml_read("http://bit.ly/1yhi1b3")
eml_from_url@dataset@title
eml_get(eml_from_url, "contact")
eml_get(eml_from_url, "address")
eml_get(eml_from_url, "creator")
eml_get(eml_from_url, "contact")
publish_github(repo = "emlforrcourse", username = "cpfaff")
publish_github(repo = "emlforrcourse", username = "cpfaff")
publish_github(repo = "emlforrcourse", username = "cpfaff")
publish_github(repo = "emlforrcourse", username = "cpfaff")
publish_github(repo = "emlforrcourse", username = "cpfaff")
require(EML)
require>(slidify)
require(slidify)
undescribed_data
source('~/.active-rstudio-document', echo=TRUE)
undescribed_data
ed_dataset}
described_dataset
as(described_dataset, "data.frame")
described_dataset
new("person")
new("person")
person
typeof("person")
typeof(person)
class(person)
person(given = "Claas-Thido", family = "Pfaff")
person(given = "Claas-Thido", family = "Pfaff", email = "ctpfaff@arcor.de")
test = person(given = "Claas-Thido", family = "Pfaff", email = "ctpfaff@arcor.de")
typeof(test)
class(typeof)
class(test)
as(test, "creator")
person("Claas-Thido Pfaff <fake@test.com>")
claas = person("Claas-Thido Pfaff <fake@test.com>")
as("creator", claas)
as("claas", creator)
as(claas, "creator")
claas = person("Claas-Thido Pfaff <fake@test.com>")
as(claas, "creator")
claas_person = person("Claas-Thido Pfaff <fake@test.com>")
claas_person = person("Claas-Thido Pfaff <fake@test.com>")
claas_creator = as(claas_person, "creator")
claas_creator@individualName@surName
claas_creator
claas_creator@individualName@surName
claas_creator@individualName
claas_person = person("Claas-Thido Pfaff <fake@test.com>")
claas_creator = as(claas_person, "creator")
claas_creator@individualName@surName
claas_creator@individualName@givenName
claas_creator@individualName@givenName
claas_creator = new("creator",
individualName = new("individualName",
givenName = "Claas-Thido",
surName = "Pfaff"),
electronicMailAddress = "fake@test.com")
getSlots("creator")
claas_person = person("Claas-Thido Pfaff <fake@test.com>")
claas_creator = as(claas_person, "creator")
claas_creator = as(claas_person, "creator")
claas_creator
claas_person
as(claas_person, "creator")
claas_person = eml_person("Claas-Thido Pfaff <fake@test.com>")
claas_person
claas_person = person("Claas-Thido Pfaff <fake@test.com>")
claas_person = eml_person("Claas-Thido Pfaff <fake@test.com>")
claas_creator = as(claas_person, "creator")
claas_creator
claas_person = eml_person("Claas-Thido Pfaff <fake@test.com>")
claas_creator = new("creator",
individualName = new("individualName",
givenName = "Claas-Thido",
surName = "Pfaff"),
electronicMailAddress = "fake@test.com")
getSlots("creator")
source('~/.active-rstudio-document', echo=TRUE)
claas_creator = new("creator",
individualName = new("individualName",
givenName = "Claas-Thido",
surName = "Pfaff"),
electronicMailAddress = "fake@test.com")
claas_creator
claas_person = eml_person("Claas-Thido Pfaff <fake@test.com>")
claas_creator = as(claas_person, "creator")
claas_creator
claas_creator@individualName@surName
claas_creator@individualName@givenName
getSlots("creator")
getSlots("address")
river = c("SAC",  "SAC",   "AM")
spp   = c("king",  "king", "ccho")
stg   = c("smolt", "parr", "smolt")
ct    = c(293,    410,    210)
dates = c("1991-10-10", "1992-11-10", "1993-10-10")
undescribed_data = data.frame(river, spp, stg, ct, dates)
kable(undescribed_data)
require("EML")
require("knitr")
kable(undescribed_data)
undescribed_data = read.csv("http://bit.ly/11Q4GOt")
metadata_locally = eml_read("mymetadata.xml")
eml_get(metadata_online, "contact")
claas_person = eml_person("Claas-Thido Pfaff <fake@test.com>")
source('~/.active-rstudio-document', echo=TRUE)
data = eml(dat = described_dataset,
title = "Count of life fish in traps",
contact = claas_contact,
creator = claas_creator,
intellectualRights = "CC0, Creative commons zero"
)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
claas_creator@address = address
claas_contact = as(claas_creator, "contact")
claas_contact
claas_creator = new("creator",
individualName = new("individualName",
givenName = "Claas-Thido",
surName = "Pfaff"),
electronicMailAddress = "fake@test.com")
require("EML")
new("creator")
require(slidify)
source('~/.active-rstudio-document', echo=TRUE)
claas_creator@individualName@surName
```{r check_individual_name_surName, cache = F}
claas_creator@individualName@givenName
myname = eml_person("J. Steidle <steidle@fake.com>")
myname_contact = as(myname, "contact")
myname_contact
myaddress = new("address",
deliveryPoint = "University Hohenheim, Schloss Hohenheim 1",
city          = "Stuttgart",
postalCode    = "70599",
country       = "GER")
myname_contact@address = myaddress
myname_contact
eml_person
myname = eml_person("J. Steidle <steidle@fake.com>" role="cre")
myname = eml_person("J. Steidle <steidle@fake.com> [cre]")
myname
person
person(given = "Claas", role = "cre")
myname = eml_person("J. Steidle [cre] <steidle@fake.com>")
myname
